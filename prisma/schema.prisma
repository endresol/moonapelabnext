generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique(map: "name") @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([permission_id], map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.DateTime(6)
  is_superuser               Boolean
  username                   String                       @unique(map: "username") @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.DateTime(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.DateTime(6)
  object_id           String?              @db.LongText
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.UnsignedSmallInt
  change_message      String               @db.LongText
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.DateTime(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String   @db.LongText
  expire_date  DateTime @db.DateTime(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
}

model members_claim {
  id                  BigInt                @id @default(autoincrement())
  title               String                @db.LongText
  text                String?               @db.LongText
  active              Boolean
  members_claimoption members_claimoption[]
}

model members_claimer {
  id         BigInt  @id @default(autoincrement())
  wallet     String  @db.VarChar(300)
  country    String  @db.VarChar(100)
  phone      String  @db.VarChar(100)
  email      String  @db.VarChar(200)
  city       String  @db.VarChar(200)
  postal     String  @db.VarChar(100)
  address    String  @db.VarChar(500)
  flat       String? @db.VarChar(20)
  firstname  String  @db.VarChar(300)
  lastname   String  @db.VarChar(300)
  size       String  @db.VarChar(20)
  agree      Boolean
  gets_merch Boolean
}

model members_claimoption {
  id            BigInt        @id @default(autoincrement())
  name          String        @db.VarChar(200)
  claim_id      BigInt
  members_claim members_claim @relation(fields: [claim_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "members_claimoption_claim_id_9e8526ea_fk_members_claim_id")

  @@index([claim_id], map: "members_claimoption_claim_id_9e8526ea_fk_members_claim_id")
}

model members_genzwinners {
  id      BigInt @id @default(autoincrement())
  address String @db.VarChar(150)
  amount  Int
}

model members_leaderboard {
  id     BigInt  @id @default(autoincrement())
  active Boolean
}

model members_leaderboardevent {
  id                      BigInt                  @id @default(autoincrement())
  round                   Int
  draw                    Int
  ticketnum               Int
  item                    String                  @db.VarChar(100)
  date                    DateTime                @db.DateTime(6)
  address_id              BigInt
  members_leaderboarduser members_leaderboarduser @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "members_leaderboarde_address_id_0417990d_fk_members_l")

  @@index([address_id], map: "members_leaderboarde_address_id_0417990d_fk_members_l")
}

model members_leaderboardeventround {
  id           BigInt @id @default(autoincrement())
  currentround Int
}

model members_leaderboardschedule {
  id       BigInt @id @default(autoincrement())
  round    Int
  subround Int
  item     String @db.VarChar(100)
}

model members_leaderboardtickets {
  id                      BigInt                  @id @default(autoincrement())
  ticketnum               Int
  address_id              BigInt
  members_leaderboarduser members_leaderboarduser @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "members_leaderboardt_address_id_ea36fe80_fk_members_l")

  @@index([address_id], map: "members_leaderboardt_address_id_ea36fe80_fk_members_l")
}

model members_leaderboarduser {
  id                         BigInt                       @id @default(autoincrement())
  address                    String                       @db.VarChar(150)
  points                     Int
  spins                      Int
  made_spins                 Int
  members_leaderboardevent   members_leaderboardevent[]
  members_leaderboardtickets members_leaderboardtickets[]
}

model members_nftwinners {
  id      BigInt @id @default(autoincrement())
  address String @db.VarChar(150)
  amount  Int
}

model members_raffle {
  id              BigInt  @id @default(autoincrement())
  text            String  @db.LongText
  active          Boolean
  not_active_text String? @db.LongText
}

model members_rafflemember {
  id          BigInt  @id @default(autoincrement())
  pass_name   Int?
  wallet      String  @db.VarChar(100)
  whitelisted Boolean
  quantity    Int
}

model members_wheelroyale {
  id              BigInt  @id @default(autoincrement())
  text            String  @db.VarChar(1000)
  not_active_text String? @db.LongText
  active          Boolean
}

model members_withdrawal {
  id      BigInt   @id @default(autoincrement())
  address String   @db.VarChar(100)
  amount  Decimal  @db.Decimal(35, 8)
  date    DateTime @db.DateTime(6)
}

model nfts_apenft {
  id     BigInt  @id @default(autoincrement())
  nft_id Int
  owner  String? @db.VarChar(150)
}

model nfts_breedingnft {
  id     BigInt  @id @default(autoincrement())
  nft_id Int
  owner  String? @db.VarChar(150)
}

model nfts_colanft {
  id         BigInt @id @default(autoincrement())
  nft_id     Int
  nft_type   String @db.VarChar(200)
  price      Int
  max_supply Int
}

model nfts_contract {
  id               BigInt             @id @default(autoincrement())
  provider         String             @db.VarChar(500)
  address          String             @db.VarChar(500)
  name             String             @db.VarChar(100)
  abi              String             @db.LongText
  mainnet          Boolean
  opensea_url      String?            @db.VarChar(300)
  text             String?            @db.LongText
  standard         String             @db.VarChar(100)
  active           Boolean
  nfts_transaction nfts_transaction[]
}

model nfts_error {
  id       BigInt   @id @default(autoincrement())
  address  String?  @db.VarChar(100)
  location String?  @db.VarChar(200)
  error    String?  @db.LongText
  date     DateTime @db.DateTime(6)
}

model nfts_lootboosts {
  id       BigInt  @id @default(autoincrement())
  nft_type String  @db.VarChar(200)
  boost    Decimal @db.Decimal(10, 1)
}

model nfts_lootnft {
  id       BigInt @id @default(autoincrement())
  nft_id   Int
  nft_type String @db.VarChar(200)
}

model nfts_metamaskerror {
  id          BigInt   @id @default(autoincrement())
  address     String?  @db.VarChar(100)
  code        String   @db.VarChar(10)
  message     String   @db.LongText
  description String   @db.LongText
  date        DateTime @db.DateTime(6)
  params      String?  @db.LongText
}

model nfts_petnft {
  id           BigInt @id @default(autoincrement())
  nft_id       Int
  nft_type     String @db.VarChar(200)
  daily_reward Int
  price        Int
  max_supply   Int
}

model nfts_saleaction {
  id            BigInt   @id @default(autoincrement())
  address       String   @db.VarChar(200)
  quantity      Int
  whitelistSale Boolean
  error         String?  @db.LongText
  gas           String?  @db.VarChar(80)
  gasPrice      String?  @db.VarChar(80)
  maxFeePerGas  String?  @db.VarChar(80)
  counter       Int
  date          DateTime @db.DateTime(6)
}

model nfts_transaction {
  id            BigInt        @id @default(autoincrement())
  hash          String        @db.VarChar(500)
  from_address  String        @db.VarChar(100)
  value         Int
  input_data    String        @db.VarChar(1000)
  contract_id   BigInt
  nfts_contract nfts_contract @relation(fields: [contract_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "nfts_transaction_contract_id_1254897e_fk_nfts_contract_id")

  @@index([contract_id], map: "nfts_transaction_contract_id_1254897e_fk_nfts_contract_id")
}

model nfts_treasurynft {
  id     BigInt  @id @default(autoincrement())
  nft_id Int
  owner  String? @db.VarChar(150)
}

model pages_banner {
  id          BigInt  @id @default(autoincrement())
  title       String  @db.VarChar(200)
  text        String  @db.LongText
  button_text String? @db.VarChar(100)
  button_link String  @db.VarChar(300)
  open_in_tab Boolean
  image       String  @db.VarChar(100)
}

model pages_command {
  id      BigInt @id @default(autoincrement())
  cmd     String @db.VarChar(200)
  from_id Int
  to_id   Int
}

model pages_faq {
  id       BigInt @id @default(autoincrement())
  title    String @db.VarChar(500)
  answer   String @db.LongText
  priority Int
}

model pages_telegramchatid {
  id         BigInt  @id @default(autoincrement())
  chat_id    String  @db.VarChar(100)
  get_errors Boolean
  name       String  @db.VarChar(100)
}
